#!/usr/bin/env python3
import argparse
import os
import shutil

import commands


class Run(object):
    def __init__(self, *args, **kwargs):
        """
        Prepare input to run PyModSim. Depending on the steps selected,
        the input will be processed accordingly.
        """
        self.nstep = kwargs.get("nstep")
        self.sequence = kwargs.get("sequence") or ""
        self.pdb = kwargs.get("pdb") or ""
        self.Nterm = kwargs.get("Nterm") or ""
        self.Cterm = kwargs.get("Cterm") or ""
        self.loop = kwargs.get("loop") or ""
        self.loop_fill = kwargs.get("loop_fill") or ""
        self.topology = kwargs.get("topology")
        self.chain = kwargs.get("chain")

        self.cmd = commands.Commands(nstep=self.nstep,
                                     sequence=self.sequence,
                                     pdb=self.pdb,
                                     Nterm=self.Nterm,
                                     Cterm=self.Cterm,
                                     loop=self.loop,
                                     loop_fill=self.loop_fill,
                                     topology=self.topology,
                                     chain=self.chain)
        
    def clean(self):
        """
        Cleans all previously generated files
        """
        # re-write log file
        f = open("pymodsim.log", "w")
        f.close()
        
        to_unlink = []
        dirs_to_unlink = ["finalOutput"]
        
        if self.nstep in {"0", "1"}:
            unlink_files = ["ld.so.cache", "ranked_0.pdb"]
            for target in unlink_files:
                to_unlink.append(target)
            unlink_dirs = [self.sequence[:-6], "sequences"]
            for target in unlink_dirs:
                dirs_to_unlink.append(target)
        
        if self.nstep in {"0", "2", "23"}:
            unlink_files = ["alignment.pir", "refined.B99990001.pdb", 
                            "refined.D00000001", "refined.ini", "refined.rsr",
                            "refined.sch", "refined.V99990001"]
            for target in unlink_files:
                to_unlink.append(target)
   
        if self.nstep in {"0", "23", "3"}:
            unlink_files = [self.pdb[:-4]+"out.pdb", "2membranes.inp", 
                            "datapar1", "datapar2", "datasub1", "fort.4", 
                            "fort.41", "homology.pdb", 
                            "refined.B99990001out.pdb", "res.lib"]
            for target in unlink_files:
                to_unlink.append(target)

        for target in to_unlink:
            if os.path.isfile(target): os.unlink(target)

        for target in dirs_to_unlink:
            if os.path.isdir(target): shutil.rmtree(target)

    def modsim(self):
        """
        Run PyModSim
        """
        if self.nstep == "0":
            steps = ["Homology", "ModPrep", "Orientation"]
        if self.nstep == "1":
            steps = ["Homology"]
        if self.nstep == "2":
            steps = ["ModPrep"]
        if self.nstep == "23":
            steps = ["ModPrep", "Orientation"]
        if self.nstep == "3":
            steps = ["Orientation"]

        for step in steps:
            self.cmd.select_recipe(stage=step)
            self.cmd.run_recipe()        

        
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog='pymodsim',
        description=' == Create prepared homology models given a sequence. == ')

    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s 1.0')
    
    parser.add_argument('-n', "--nstep",
                        dest = "nstep",
                        help = "PyModSim steps you wish to execute. This \
            allowes you modify the model preparation steps - see documentation \
            Options: (0) Full, (1) Homology|AlphaFold, (2) ModPrep|MODELLER, \
            (3) Orientation|PPM, and (23) ModPrep+Orientation",
                        default = "0")
        
    parser.add_argument('-s', "--seq",
                        dest = "sequence",
                        help = "Name of the sequence for which to create an \
            homology model. -s is only required if -n = 0, 1 or 2. Use the fasta \
            extension. (example: -s myseq.fasta)")

    parser.add_argument('-p', "--pdb",
                        dest = "pdb",
                        help = "Name of the protein to process. -p is only required \
            if -n = 2 or 3. Use the pdb extension. (example: -p myprot.pdb)")
            
    parser.add_argument('-N', "--Nterm",
                        dest = "Nterm",
                        help = "Residue number at which to cut the N-terminus. \
            Note: the chain up AND including the given residue will be removed. \
            -N is only used if -n = 2. If you wish to use the default cutoff, \
            don't specify -N. If you wish not to cut the N-term: set -N = 0")            
            
    parser.add_argument('-C', "--Cterm",
                        dest = "Cterm",
                        help = "Residue number at which to cut the C-terminus. \
            Note: the chain from AND including the given residue will be removed. \
            -C is only used if -n = 2. If you wish to use the default cutoff, \
            don't specify -C. If you wish not to cut the C-term: set -C = 0")             

    parser.add_argument('-l', "--loop",
                        dest = "loop",
                        help = "Residue numbers at which to cut loop(s). Define \
            the first and last residue of the loop you wish to cut ('-' delimited) \
            If there are multiple loops to cut, delimit the loop cuts with a ',' \
            (example: -l 101-131,230-250). If you do not with to cut any loops: set \
            -l = 0")
    
    parser.add_argument('-f', "--loop_fill",
                        dest = "loop_fill",
                        help = "Amount of Å per AA to fill cut loops. The total \
            distance is calculated from the coordinates of the remaining residues. \
            The AA contour length is 3.4-4.0 Å, To allow for flexibility in the \
            loop, 2.0 Å/AA (default) is suggested. (example: -f 2.0)",
                        default = "2.0")      

    parser.add_argument('-t', "--topology",
                        dest = "topology",
                        help = "Indicate the topology of the N-term within \
            the protein structure. 'out': extracellular N-term (default), 'in': \
            intracellular N-term.",
                        default = "out")  

    parser.add_argument('-c', "--chain",
                        dest = "chain",
                        help = "Only use if -n = 3 (i.e. only PPM). If more \
            than 1 chain, add a comma-seperated list of the chain identifiers. \
            (example: -c A,B,C)",
                        default = "A")          
    
    args = parser.parse_args()

    run = Run(sequence = args.sequence,
              nstep = args.nstep,
              pdb = args.pdb,
              Nterm = args.Nterm,
              Cterm = args.Cterm,
              loop = args.loop,
              loop_fill = args.loop_fill,
              topology = args.topology,
              chain = args.chain)

    run.clean()
    run.modsim()
